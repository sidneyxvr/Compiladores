===== Terminals =====
[0]EOF [1]error [2]DISPLAY [3]CLASS [4]NEW 
[5]EXTENDS [6]INT [7]BOOLEAN [8]PUBLIC [9]STATIC 
[10]VOID [11]THIS [12]STRING [13]MAIN [14]LENGTH 
[15]IF [16]ELSE [17]WHILE [18]RETURN [19]TRUE 
[20]FALSE [21]PRINT [22]PLUS [23]BECOMES [24]MINUS 
[25]TIMES [26]NOT [27]AND [28]LESSTHAN [29]LPAREN 
[30]RPAREN [31]SEMICOLON [32]LBRACKET [33]RBRACKET [34]LBRACE 
[35]RBRACE [36]COMMA [37]DOT [38]IDENTIFIER [39]DIGIT 


===== Non terminals =====
[0]Program [1]Statement [2]AssignStatement [3]DisplayStatement [4]Expression 
[5]Identifier [6]WhileStatement [7]PrintStatement [8]IfStatement [9]ArrayAssignStatement 
[10]StatementList [11]ClassDeclList [12]ClassDecl [13]VarDeclList [14]VarDecl 
[15]MethodDeclList [16]MethodDecl [17]Formal [18]FormalList [19]ExpressionList 
[20]Type [21]MainClass 

===== Productions =====
[0] Program ::= MainClass ClassDeclList 
[1] $START ::= Program EOF 
[2] Program ::= MainClass 
[3] MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE 
[4] ClassDecl ::= CLASS Identifier LBRACE VarDeclList MethodDeclList RBRACE 
[5] ClassDecl ::= CLASS Identifier LBRACE MethodDeclList RBRACE 
[6] ClassDecl ::= CLASS Identifier LBRACE VarDeclList RBRACE 
[7] ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE 
[8] ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE MethodDeclList RBRACE 
[9] ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList RBRACE 
[10] VarDecl ::= Type Identifier SEMICOLON 
[11] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE 
[12] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE 
[13] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE 
[14] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE 
[15] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE 
[16] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE 
[17] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE 
[18] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE 
[19] Type ::= INT 
[20] Type ::= BOOLEAN 
[21] Type ::= INT LBRACKET RBRACKET 
[22] Type ::= IDENTIFIER 
[23] Statement ::= LBRACE StatementList RBRACE 
[24] Statement ::= LBRACE RBRACE 
[25] Statement ::= IfStatement 
[26] Statement ::= WhileStatement 
[27] Statement ::= PrintStatement 
[28] Statement ::= AssignStatement 
[29] Statement ::= ArrayAssignStatement 
[30] Statement ::= DisplayStatement 
[31] Expression ::= Expression PLUS Expression 
[32] Expression ::= Expression TIMES Expression 
[33] Expression ::= Expression MINUS Expression 
[34] Expression ::= Expression LESSTHAN Expression 
[35] Expression ::= Expression AND Expression 
[36] Expression ::= Expression LBRACKET Expression RBRACKET 
[37] Expression ::= Expression DOT LENGTH 
[38] Expression ::= Expression DOT Identifier LPAREN ExpressionList RPAREN 
[39] Expression ::= Expression DOT Identifier LPAREN RPAREN 
[40] Expression ::= DIGIT 
[41] Expression ::= TRUE 
[42] Expression ::= FALSE 
[43] Expression ::= IDENTIFIER 
[44] Expression ::= THIS 
[45] Expression ::= NEW INT LBRACKET Expression RBRACKET 
[46] Expression ::= NEW Identifier LPAREN RPAREN 
[47] Expression ::= NOT Expression 
[48] Expression ::= LPAREN Expression RPAREN 
[49] Identifier ::= IDENTIFIER 
[50] VarDeclList ::= VarDecl 
[51] VarDeclList ::= VarDeclList VarDecl 
[52] MethodDeclList ::= MethodDecl 
[53] MethodDeclList ::= MethodDeclList MethodDecl 
[54] ClassDeclList ::= ClassDecl 
[55] ClassDeclList ::= ClassDeclList ClassDecl 
[56] ExpressionList ::= Expression 
[57] ExpressionList ::= ExpressionList COMMA Expression 
[58] FormalList ::= Formal 
[59] FormalList ::= FormalList COMMA Formal 
[60] StatementList ::= Statement 
[61] StatementList ::= StatementList Statement 
[62] WhileStatement ::= WHILE LPAREN Expression RPAREN Statement 
[63] AssignStatement ::= Identifier BECOMES Expression SEMICOLON 
[64] DisplayStatement ::= DISPLAY Expression SEMICOLON 
[65] PrintStatement ::= PRINT LPAREN Expression RPAREN SEMICOLON 
[66] IfStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
[67] ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
[68] Formal ::= Type Identifier 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Program ::= (*) MainClass , {EOF }]
  [$START ::= (*) Program EOF , {EOF }]
  [MainClass ::= (*) CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
  [Program ::= (*) MainClass ClassDeclList , {EOF }]
}
transition on CLASS to state [3]
transition on MainClass to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [190]

-------------------
lalr_state [2]: {
  [ClassDeclList ::= (*) ClassDecl , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
  [Program ::= MainClass (*) , {EOF }]
  [ClassDecl ::= (*) CLASS Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDeclList ::= (*) ClassDeclList ClassDecl , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [Program ::= MainClass (*) ClassDeclList , {EOF }]
}
transition on CLASS to state [106]
transition on ClassDecl to state [105]
transition on ClassDeclList to state [104]

-------------------
lalr_state [3]: {
  [Identifier ::= (*) IDENTIFIER , {LBRACE }]
  [MainClass ::= CLASS (*) Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on Identifier to state [5]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [4]: {
  [Identifier ::= IDENTIFIER (*) , {EXTENDS BECOMES LPAREN RPAREN SEMICOLON LBRACKET LBRACE COMMA }]
}

-------------------
lalr_state [5]: {
  [MainClass ::= CLASS Identifier (*) LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [6]

-------------------
lalr_state [6]: {
  [MainClass ::= CLASS Identifier LBRACE (*) PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [7]

-------------------
lalr_state [7]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC (*) STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on STATIC to state [8]

-------------------
lalr_state [8]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC (*) VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on VOID to state [9]

-------------------
lalr_state [9]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID (*) MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on MAIN to state [10]

-------------------
lalr_state [10]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN (*) LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LPAREN to state [11]

-------------------
lalr_state [11]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN (*) STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on STRING to state [12]

-------------------
lalr_state [12]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING (*) LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LBRACKET to state [13]

-------------------
lalr_state [13]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET (*) RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on RBRACKET to state [14]

-------------------
lalr_state [14]: {
  [Identifier ::= (*) IDENTIFIER , {RPAREN }]
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET (*) Identifier RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on Identifier to state [15]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [15]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier (*) RPAREN LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on RPAREN to state [16]

-------------------
lalr_state [16]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN (*) LBRACE Statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [17]

-------------------
lalr_state [17]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {RBRACE }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {RBRACE }]
  [Statement ::= (*) AssignStatement , {RBRACE }]
  [Statement ::= (*) IfStatement , {RBRACE }]
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE (*) Statement RBRACE RBRACE , {EOF CLASS }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {RBRACE }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {RBRACE }]
  [Statement ::= (*) DisplayStatement , {RBRACE }]
  [Statement ::= (*) PrintStatement , {RBRACE }]
  [Statement ::= (*) LBRACE RBRACE , {RBRACE }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {RBRACE }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {RBRACE }]
  [Statement ::= (*) ArrayAssignStatement , {RBRACE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {RBRACE }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {RBRACE }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [26]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [18]: {
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= LBRACE (*) StatementList RBRACE , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= LBRACE (*) RBRACE , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on RBRACE to state [101]
transition on AssignStatement to state [29]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [28]
transition on PRINT to state [27]
transition on Statement to state [100]
transition on WhileStatement to state [24]
transition on IF to state [25]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on StatementList to state [99]
transition on LBRACE to state [18]
transition on WHILE to state [19]

-------------------
lalr_state [19]: {
  [WhileStatement ::= WHILE (*) LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on LPAREN to state [95]

-------------------
lalr_state [20]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [DisplayStatement ::= DISPLAY (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [93]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [21]: {
  [Statement ::= DisplayStatement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [22]: {
  [ArrayAssignStatement ::= Identifier (*) LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [AssignStatement ::= Identifier (*) BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on LBRACKET to state [85]
transition on BECOMES to state [84]

-------------------
lalr_state [23]: {
  [Statement ::= IfStatement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [24]: {
  [Statement ::= WhileStatement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [25]: {
  [IfStatement ::= IF (*) LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on LPAREN to state [78]

-------------------
lalr_state [26]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement (*) RBRACE RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [76]

-------------------
lalr_state [27]: {
  [PrintStatement ::= PRINT (*) LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on LPAREN to state [31]

-------------------
lalr_state [28]: {
  [Statement ::= PrintStatement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [29]: {
  [Statement ::= AssignStatement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [30]: {
  [Statement ::= ArrayAssignStatement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [31]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [PrintStatement ::= PRINT LPAREN (*) Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [35]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [32]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= NEW (*) Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= NEW (*) INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Identifier to state [70]
transition on INT to state [69]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [33]: {
  [Expression ::= TRUE (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [34]: {
  [Expression ::= DIGIT (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [35]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [PrintStatement ::= PRINT LPAREN Expression (*) RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on RPAREN to state [67]

-------------------
lalr_state [36]: {
  [Expression ::= FALSE (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [37]: {
  [Expression ::= THIS (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [38]: {
  [Expression ::= IDENTIFIER (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [39]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= NOT (*) Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [66]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [40]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= LPAREN (*) Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [41]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [41]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= LPAREN Expression (*) RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on RPAREN to state [42]

-------------------
lalr_state [42]: {
  [Expression ::= LPAREN Expression RPAREN (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [43]: {
  [Expression ::= Expression AND (*) Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [65]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [44]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression PLUS (*) Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [64]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [45]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression MINUS (*) Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [63]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [46]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression LESSTHAN (*) Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [62]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [47]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression TIMES (*) Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [61]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [48]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression LBRACKET (*) Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [59]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [49]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= Expression DOT (*) LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression DOT (*) Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression DOT (*) Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Identifier to state [51]
transition on IDENTIFIER to state [4]
transition on LENGTH to state [50]

-------------------
lalr_state [50]: {
  [Expression ::= Expression DOT LENGTH (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [51]: {
  [Expression ::= Expression DOT Identifier (*) LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression DOT Identifier (*) LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [52]

-------------------
lalr_state [52]: {
  [ExpressionList ::= (*) ExpressionList COMMA Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression DOT Identifier LPAREN (*) ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [ExpressionList ::= (*) Expression , {RPAREN COMMA }]
  [Expression ::= Expression DOT Identifier LPAREN (*) RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on RPAREN to state [55]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [54]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]
transition on ExpressionList to state [53]

-------------------
lalr_state [53]: {
  [ExpressionList ::= ExpressionList (*) COMMA Expression , {RPAREN COMMA }]
  [Expression ::= Expression DOT Identifier LPAREN ExpressionList (*) RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on RPAREN to state [57]
transition on COMMA to state [56]

-------------------
lalr_state [54]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [ExpressionList ::= Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [55]: {
  [Expression ::= Expression DOT Identifier LPAREN RPAREN (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [56]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [ExpressionList ::= ExpressionList COMMA (*) Expression , {RPAREN COMMA }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [58]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [57]: {
  [Expression ::= Expression DOT Identifier LPAREN ExpressionList RPAREN (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [58]: {
  [ExpressionList ::= ExpressionList COMMA Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [59]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression LBRACKET Expression (*) RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on RBRACKET to state [60]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [60]: {
  [Expression ::= Expression LBRACKET Expression RBRACKET (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [61]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression TIMES Expression (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [62]: {
  [Expression ::= Expression LESSTHAN Expression (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [63]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression MINUS Expression (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [64]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression PLUS Expression (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [65]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression AND Expression (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [66]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= NOT Expression (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [67]: {
  [PrintStatement ::= PRINT LPAREN Expression RPAREN (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on SEMICOLON to state [68]

-------------------
lalr_state [68]: {
  [PrintStatement ::= PRINT LPAREN Expression RPAREN SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [69]: {
  [Expression ::= NEW INT (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LBRACKET to state [73]

-------------------
lalr_state [70]: {
  [Expression ::= NEW Identifier (*) LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [71]

-------------------
lalr_state [71]: {
  [Expression ::= NEW Identifier LPAREN (*) RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on RPAREN to state [72]

-------------------
lalr_state [72]: {
  [Expression ::= NEW Identifier LPAREN RPAREN (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [73]: {
  [Expression ::= NEW INT LBRACKET (*) Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [74]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [74]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= NEW INT LBRACKET Expression (*) RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on RBRACKET to state [75]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [75]: {
  [Expression ::= NEW INT LBRACKET Expression RBRACKET (*) , {PLUS MINUS TIMES AND LESSTHAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [76]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE (*) RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [77]

-------------------
lalr_state [77]: {
  [MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [78]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [IfStatement ::= IF LPAREN (*) Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [79]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [79]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [IfStatement ::= IF LPAREN Expression (*) RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on RPAREN to state [80]

-------------------
lalr_state [80]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ELSE }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {ELSE }]
  [Statement ::= (*) AssignStatement , {ELSE }]
  [Statement ::= (*) IfStatement , {ELSE }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {ELSE }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ELSE }]
  [Statement ::= (*) DisplayStatement , {ELSE }]
  [Statement ::= (*) PrintStatement , {ELSE }]
  [Statement ::= (*) LBRACE RBRACE , {ELSE }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {ELSE }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {ELSE }]
  [IfStatement ::= IF LPAREN Expression RPAREN (*) Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {ELSE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {ELSE }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {ELSE }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [81]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [81]: {
  [IfStatement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on ELSE to state [82]

-------------------
lalr_state [82]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [IfStatement ::= IF LPAREN Expression RPAREN Statement ELSE (*) Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [83]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [83]: {
  [IfStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [84]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [AssignStatement ::= Identifier BECOMES (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [91]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [85]: {
  [ArrayAssignStatement ::= Identifier LBRACKET (*) Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [86]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [86]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [ArrayAssignStatement ::= Identifier LBRACKET Expression (*) RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN LBRACKET RBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on RBRACKET to state [87]
transition on PLUS to state [44]
transition on AND to state [43]

-------------------
lalr_state [87]: {
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET (*) BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on BECOMES to state [88]

-------------------
lalr_state [88]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [89]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [89]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [90]

-------------------
lalr_state [90]: {
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [91]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [AssignStatement ::= Identifier BECOMES Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [92]

-------------------
lalr_state [92]: {
  [AssignStatement ::= Identifier BECOMES Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [93]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [DisplayStatement ::= DISPLAY Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [94]

-------------------
lalr_state [94]: {
  [DisplayStatement ::= DISPLAY Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [95]: {
  [WhileStatement ::= WHILE LPAREN (*) Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [96]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [96]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [WhileStatement ::= WHILE LPAREN Expression (*) RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN RPAREN LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on RPAREN to state [97]

-------------------
lalr_state [97]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [WhileStatement ::= WHILE LPAREN Expression RPAREN (*) Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [98]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [98]: {
  [WhileStatement ::= WHILE LPAREN Expression RPAREN Statement (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [99]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= LBRACE StatementList (*) RBRACE , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on RBRACE to state [103]
transition on AssignStatement to state [29]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [102]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [100]: {
  [StatementList ::= Statement (*) , {DISPLAY IF WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [101]: {
  [Statement ::= LBRACE RBRACE (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [102]: {
  [StatementList ::= StatementList Statement (*) , {DISPLAY IF WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [103]: {
  [Statement ::= LBRACE StatementList RBRACE (*) , {DISPLAY IF ELSE WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [104]: {
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [Program ::= MainClass ClassDeclList (*) , {EOF }]
  [ClassDeclList ::= ClassDeclList (*) ClassDecl , {EOF CLASS }]
}
transition on CLASS to state [106]
transition on ClassDecl to state [189]

-------------------
lalr_state [105]: {
  [ClassDeclList ::= ClassDecl (*) , {EOF CLASS }]
}

-------------------
lalr_state [106]: {
  [ClassDecl ::= CLASS (*) Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {EXTENDS LBRACE }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
}
transition on Identifier to state [107]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [107]: {
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) LBRACE MethodDeclList RBRACE , {EOF CLASS }]
}
transition on EXTENDS to state [109]
transition on LBRACE to state [108]

-------------------
lalr_state [108]: {
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RBRACE }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [VarDeclList ::= (*) VarDecl , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [ClassDecl ::= CLASS Identifier LBRACE (*) VarDeclList RBRACE , {EOF CLASS }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LBRACE (*) VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LBRACE (*) MethodDeclList RBRACE , {EOF CLASS }]
}
transition on MethodDeclList to state [184]
transition on IDENTIFIER to state [119]
transition on VarDecl to state [118]
transition on MethodDecl to state [117]
transition on BOOLEAN to state [116]
transition on PUBLIC to state [115]
transition on VarDeclList to state [183]
transition on INT to state [113]
transition on Type to state [112]

-------------------
lalr_state [109]: {
  [Identifier ::= (*) IDENTIFIER , {LBRACE }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LBRACE MethodDeclList RBRACE , {EOF CLASS }]
}
transition on Identifier to state [110]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [110]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LBRACE VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LBRACE VarDeclList RBRACE , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LBRACE MethodDeclList RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [111]

-------------------
lalr_state [111]: {
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RBRACE }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE (*) MethodDeclList RBRACE , {EOF CLASS }]
  [VarDeclList ::= (*) VarDecl , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE (*) VarDeclList RBRACE , {EOF CLASS }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE (*) VarDeclList MethodDeclList RBRACE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
}
transition on MethodDeclList to state [120]
transition on IDENTIFIER to state [119]
transition on VarDecl to state [118]
transition on MethodDecl to state [117]
transition on BOOLEAN to state [116]
transition on PUBLIC to state [115]
transition on VarDeclList to state [114]
transition on INT to state [113]
transition on Type to state [112]

-------------------
lalr_state [112]: {
  [Identifier ::= (*) IDENTIFIER , {SEMICOLON }]
  [VarDecl ::= Type (*) Identifier SEMICOLON , {DISPLAY INT BOOLEAN PUBLIC IF WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on Identifier to state [181]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [113]: {
  [Type ::= INT (*) LBRACKET RBRACKET , {IDENTIFIER }]
  [Type ::= INT (*) , {IDENTIFIER }]
}
transition on LBRACKET to state [179]

-------------------
lalr_state [114]: {
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RBRACE }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList (*) RBRACE , {EOF CLASS }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList (*) MethodDeclList RBRACE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
}
transition on MethodDeclList to state [177]
transition on RBRACE to state [176]
transition on IDENTIFIER to state [119]
transition on VarDecl to state [140]
transition on MethodDecl to state [117]
transition on BOOLEAN to state [116]
transition on PUBLIC to state [115]
transition on INT to state [113]
transition on Type to state [112]

-------------------
lalr_state [115]: {
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on INT to state [113]
transition on BOOLEAN to state [116]
transition on IDENTIFIER to state [119]
transition on Type to state [123]

-------------------
lalr_state [116]: {
  [Type ::= BOOLEAN (*) , {IDENTIFIER }]
}

-------------------
lalr_state [117]: {
  [MethodDeclList ::= MethodDecl (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [118]: {
  [VarDeclList ::= VarDecl (*) , {DISPLAY INT BOOLEAN PUBLIC IF WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [119]: {
  [Type ::= IDENTIFIER (*) , {IDENTIFIER }]
}

-------------------
lalr_state [120]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE MethodDeclList (*) RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [115]
transition on MethodDecl to state [122]
transition on RBRACE to state [121]

-------------------
lalr_state [121]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE MethodDeclList RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [122]: {
  [MethodDeclList ::= MethodDeclList MethodDecl (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [123]: {
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on Identifier to state [124]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [124]: {
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on LPAREN to state [125]

-------------------
lalr_state [125]: {
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [FormalList ::= (*) FormalList COMMA Formal , {RPAREN COMMA }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [FormalList ::= (*) Formal , {RPAREN COMMA }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on INT to state [113]
transition on BOOLEAN to state [116]
transition on IDENTIFIER to state [119]
transition on RPAREN to state [129]
transition on Type to state [128]
transition on Formal to state [127]
transition on FormalList to state [126]

-------------------
lalr_state [126]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [FormalList ::= FormalList (*) COMMA Formal , {RPAREN COMMA }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on RPAREN to state [154]
transition on COMMA to state [153]

-------------------
lalr_state [127]: {
  [FormalList ::= Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [128]: {
  [Identifier ::= (*) IDENTIFIER , {RPAREN COMMA }]
  [Formal ::= Type (*) Identifier , {RPAREN COMMA }]
}
transition on Identifier to state [152]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [129]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on LBRACE to state [130]

-------------------
lalr_state [130]: {
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [VarDeclList ::= (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE (*) StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE (*) VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE (*) VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on ArrayAssignStatement to state [30]
transition on StatementList to state [134]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on Statement to state [100]
transition on PRINT to state [27]
transition on Identifier to state [22]
transition on VarDecl to state [118]
transition on AssignStatement to state [29]
transition on VarDeclList to state [133]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [24]
transition on Type to state [112]
transition on LBRACE to state [18]
transition on IF to state [25]
transition on IfStatement to state [23]
transition on RETURN to state [132]
transition on IDENTIFIER to state [131]
transition on PrintStatement to state [28]
transition on WHILE to state [19]
transition on INT to state [113]

-------------------
lalr_state [131]: {
  [Identifier ::= IDENTIFIER (*) , {BECOMES LBRACKET }]
  [Type ::= IDENTIFIER (*) , {IDENTIFIER }]
}

-------------------
lalr_state [132]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [149]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [133]: {
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList (*) StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on ArrayAssignStatement to state [30]
transition on StatementList to state [141]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on Statement to state [100]
transition on PRINT to state [27]
transition on VarDecl to state [140]
transition on Identifier to state [22]
transition on AssignStatement to state [29]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [24]
transition on Type to state [112]
transition on LBRACE to state [18]
transition on IF to state [25]
transition on IfStatement to state [23]
transition on RETURN to state [139]
transition on IDENTIFIER to state [131]
transition on PrintStatement to state [28]
transition on WHILE to state [19]
transition on INT to state [113]

-------------------
lalr_state [134]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on RETURN to state [135]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [102]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [135]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [136]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [136]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [137]

-------------------
lalr_state [137]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [138]

-------------------
lalr_state [138]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [139]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [146]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [140]: {
  [VarDeclList ::= VarDeclList VarDecl (*) , {DISPLAY INT BOOLEAN PUBLIC IF WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [141]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on RETURN to state [142]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [102]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [142]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [143]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [143]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [144]

-------------------
lalr_state [144]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [145]

-------------------
lalr_state [145]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [146]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [147]

-------------------
lalr_state [147]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [148]

-------------------
lalr_state [148]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [149]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [150]

-------------------
lalr_state [150]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [151]

-------------------
lalr_state [151]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [152]: {
  [Formal ::= Type Identifier (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [153]: {
  [Type ::= (*) INT , {IDENTIFIER }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [FormalList ::= FormalList COMMA (*) Formal , {RPAREN COMMA }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
}
transition on INT to state [113]
transition on BOOLEAN to state [116]
transition on IDENTIFIER to state [119]
transition on Type to state [128]
transition on Formal to state [175]

-------------------
lalr_state [154]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on LBRACE to state [155]

-------------------
lalr_state [155]: {
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE (*) VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [VarDeclList ::= (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE (*) VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE (*) StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on StatementList to state [158]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on Statement to state [100]
transition on PRINT to state [27]
transition on Identifier to state [22]
transition on VarDecl to state [118]
transition on AssignStatement to state [29]
transition on VarDeclList to state [157]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [24]
transition on Type to state [112]
transition on LBRACE to state [18]
transition on IF to state [25]
transition on IfStatement to state [23]
transition on RETURN to state [156]
transition on IDENTIFIER to state [131]
transition on PrintStatement to state [28]
transition on WHILE to state [19]
transition on INT to state [113]

-------------------
lalr_state [156]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [172]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [157]: {
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList (*) StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on StatementList to state [164]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on Statement to state [100]
transition on PRINT to state [27]
transition on VarDecl to state [140]
transition on Identifier to state [22]
transition on AssignStatement to state [29]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [24]
transition on Type to state [112]
transition on LBRACE to state [18]
transition on IF to state [25]
transition on IfStatement to state [23]
transition on RETURN to state [163]
transition on IDENTIFIER to state [131]
transition on PrintStatement to state [28]
transition on WHILE to state [19]
transition on INT to state [113]

-------------------
lalr_state [158]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on RETURN to state [159]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [102]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [159]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [160]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [160]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [161]

-------------------
lalr_state [161]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [162]

-------------------
lalr_state [162]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [163]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [169]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [164]: {
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [PrintStatement ::= (*) PRINT LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList (*) RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
  [Statement ::= (*) LBRACE StatementList RBRACE , {DISPLAY IF WHILE RETURN PRINT LBRACE IDENTIFIER }]
}
transition on ArrayAssignStatement to state [30]
transition on AssignStatement to state [29]
transition on RETURN to state [165]
transition on PrintStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PRINT to state [27]
transition on Statement to state [102]
transition on IF to state [25]
transition on WhileStatement to state [24]
transition on IfStatement to state [23]
transition on Identifier to state [22]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [20]
transition on WHILE to state [19]
transition on LBRACE to state [18]

-------------------
lalr_state [165]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DIGIT , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN (*) Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TRUE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) THIS , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) FALSE , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on LPAREN to state [40]
transition on NOT to state [39]
transition on IDENTIFIER to state [38]
transition on THIS to state [37]
transition on FALSE to state [36]
transition on Expression to state [166]
transition on DIGIT to state [34]
transition on TRUE to state [33]
transition on NEW to state [32]

-------------------
lalr_state [166]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [167]

-------------------
lalr_state [167]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [168]

-------------------
lalr_state [168]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [169]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [170]

-------------------
lalr_state [170]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [171]

-------------------
lalr_state [171]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [172]: {
  [Expression ::= Expression (*) DOT LENGTH , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
  [Expression ::= Expression (*) TIMES Expression , {PLUS MINUS TIMES AND LESSTHAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [49]
transition on LBRACKET to state [48]
transition on TIMES to state [47]
transition on LESSTHAN to state [46]
transition on MINUS to state [45]
transition on PLUS to state [44]
transition on AND to state [43]
transition on SEMICOLON to state [173]

-------------------
lalr_state [173]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [174]

-------------------
lalr_state [174]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [175]: {
  [FormalList ::= FormalList COMMA Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [176]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [177]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList (*) RBRACE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on PUBLIC to state [115]
transition on MethodDecl to state [122]
transition on RBRACE to state [178]

-------------------
lalr_state [178]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [179]: {
  [Type ::= INT LBRACKET (*) RBRACKET , {IDENTIFIER }]
}
transition on RBRACKET to state [180]

-------------------
lalr_state [180]: {
  [Type ::= INT LBRACKET RBRACKET (*) , {IDENTIFIER }]
}

-------------------
lalr_state [181]: {
  [VarDecl ::= Type Identifier (*) SEMICOLON , {DISPLAY INT BOOLEAN PUBLIC IF WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}
transition on SEMICOLON to state [182]

-------------------
lalr_state [182]: {
  [VarDecl ::= Type Identifier SEMICOLON (*) , {DISPLAY INT BOOLEAN PUBLIC IF WHILE RETURN PRINT LBRACE RBRACE IDENTIFIER }]
}

-------------------
lalr_state [183]: {
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RBRACE }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [ClassDecl ::= CLASS Identifier LBRACE VarDeclList (*) RBRACE , {EOF CLASS }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LBRACE VarDeclList (*) MethodDeclList RBRACE , {EOF CLASS }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {INT BOOLEAN PUBLIC RBRACE IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
}
transition on MethodDeclList to state [187]
transition on RBRACE to state [186]
transition on IDENTIFIER to state [119]
transition on VarDecl to state [140]
transition on MethodDecl to state [117]
transition on BOOLEAN to state [116]
transition on PUBLIC to state [115]
transition on INT to state [113]
transition on Type to state [112]

-------------------
lalr_state [184]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [ClassDecl ::= CLASS Identifier LBRACE MethodDeclList (*) RBRACE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on PUBLIC to state [115]
transition on MethodDecl to state [122]
transition on RBRACE to state [185]

-------------------
lalr_state [185]: {
  [ClassDecl ::= CLASS Identifier LBRACE MethodDeclList RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [186]: {
  [ClassDecl ::= CLASS Identifier LBRACE VarDeclList RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [187]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [ClassDecl ::= CLASS Identifier LBRACE VarDeclList MethodDeclList (*) RBRACE , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE StatementList RETURN Expression SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on PUBLIC to state [115]
transition on MethodDecl to state [122]
transition on RBRACE to state [188]

-------------------
lalr_state [188]: {
  [ClassDecl ::= CLASS Identifier LBRACE VarDeclList MethodDeclList RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [189]: {
  [ClassDeclList ::= ClassDeclList ClassDecl (*) , {EOF CLASS }]
}

-------------------
lalr_state [190]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 3:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 190)]
From state #2
 [term 0:REDUCE(with prod 2)] [term 3:SHIFT(to state 106)]
From state #3
 [term 38:SHIFT(to state 4)]
From state #4
 [term 5:REDUCE(with prod 49)] [term 23:REDUCE(with prod 49)]
 [term 29:REDUCE(with prod 49)] [term 30:REDUCE(with prod 49)]
 [term 31:REDUCE(with prod 49)] [term 32:REDUCE(with prod 49)]
 [term 34:REDUCE(with prod 49)] [term 36:REDUCE(with prod 49)]
From state #5
 [term 34:SHIFT(to state 6)]
From state #6
 [term 8:SHIFT(to state 7)]
From state #7
 [term 9:SHIFT(to state 8)]
From state #8
 [term 10:SHIFT(to state 9)]
From state #9
 [term 13:SHIFT(to state 10)]
From state #10
 [term 29:SHIFT(to state 11)]
From state #11
 [term 12:SHIFT(to state 12)]
From state #12
 [term 32:SHIFT(to state 13)]
From state #13
 [term 33:SHIFT(to state 14)]
From state #14
 [term 38:SHIFT(to state 4)]
From state #15
 [term 30:SHIFT(to state 16)]
From state #16
 [term 34:SHIFT(to state 17)]
From state #17
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 21:SHIFT(to state 27)]
 [term 34:SHIFT(to state 18)] [term 38:SHIFT(to state 4)]
From state #18
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 21:SHIFT(to state 27)]
 [term 34:SHIFT(to state 18)] [term 35:SHIFT(to state 101)]
 [term 38:SHIFT(to state 4)]
From state #19
 [term 29:SHIFT(to state 95)]
From state #20
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #21
 [term 2:REDUCE(with prod 30)] [term 15:REDUCE(with prod 30)]
 [term 16:REDUCE(with prod 30)] [term 17:REDUCE(with prod 30)]
 [term 18:REDUCE(with prod 30)] [term 21:REDUCE(with prod 30)]
 [term 34:REDUCE(with prod 30)] [term 35:REDUCE(with prod 30)]
 [term 38:REDUCE(with prod 30)]
From state #22
 [term 23:SHIFT(to state 84)] [term 32:SHIFT(to state 85)]
From state #23
 [term 2:REDUCE(with prod 25)] [term 15:REDUCE(with prod 25)]
 [term 16:REDUCE(with prod 25)] [term 17:REDUCE(with prod 25)]
 [term 18:REDUCE(with prod 25)] [term 21:REDUCE(with prod 25)]
 [term 34:REDUCE(with prod 25)] [term 35:REDUCE(with prod 25)]
 [term 38:REDUCE(with prod 25)]
From state #24
 [term 2:REDUCE(with prod 26)] [term 15:REDUCE(with prod 26)]
 [term 16:REDUCE(with prod 26)] [term 17:REDUCE(with prod 26)]
 [term 18:REDUCE(with prod 26)] [term 21:REDUCE(with prod 26)]
 [term 34:REDUCE(with prod 26)] [term 35:REDUCE(with prod 26)]
 [term 38:REDUCE(with prod 26)]
From state #25
 [term 29:SHIFT(to state 78)]
From state #26
 [term 35:SHIFT(to state 76)]
From state #27
 [term 29:SHIFT(to state 31)]
From state #28
 [term 2:REDUCE(with prod 27)] [term 15:REDUCE(with prod 27)]
 [term 16:REDUCE(with prod 27)] [term 17:REDUCE(with prod 27)]
 [term 18:REDUCE(with prod 27)] [term 21:REDUCE(with prod 27)]
 [term 34:REDUCE(with prod 27)] [term 35:REDUCE(with prod 27)]
 [term 38:REDUCE(with prod 27)]
From state #29
 [term 2:REDUCE(with prod 28)] [term 15:REDUCE(with prod 28)]
 [term 16:REDUCE(with prod 28)] [term 17:REDUCE(with prod 28)]
 [term 18:REDUCE(with prod 28)] [term 21:REDUCE(with prod 28)]
 [term 34:REDUCE(with prod 28)] [term 35:REDUCE(with prod 28)]
 [term 38:REDUCE(with prod 28)]
From state #30
 [term 2:REDUCE(with prod 29)] [term 15:REDUCE(with prod 29)]
 [term 16:REDUCE(with prod 29)] [term 17:REDUCE(with prod 29)]
 [term 18:REDUCE(with prod 29)] [term 21:REDUCE(with prod 29)]
 [term 34:REDUCE(with prod 29)] [term 35:REDUCE(with prod 29)]
 [term 38:REDUCE(with prod 29)]
From state #31
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #32
 [term 6:SHIFT(to state 69)] [term 38:SHIFT(to state 4)]
From state #33
 [term 22:REDUCE(with prod 41)] [term 24:REDUCE(with prod 41)]
 [term 25:REDUCE(with prod 41)] [term 27:REDUCE(with prod 41)]
 [term 28:REDUCE(with prod 41)] [term 30:REDUCE(with prod 41)]
 [term 31:REDUCE(with prod 41)] [term 32:REDUCE(with prod 41)]
 [term 33:REDUCE(with prod 41)] [term 36:REDUCE(with prod 41)]
 [term 37:REDUCE(with prod 41)]
From state #34
 [term 22:REDUCE(with prod 40)] [term 24:REDUCE(with prod 40)]
 [term 25:REDUCE(with prod 40)] [term 27:REDUCE(with prod 40)]
 [term 28:REDUCE(with prod 40)] [term 30:REDUCE(with prod 40)]
 [term 31:REDUCE(with prod 40)] [term 32:REDUCE(with prod 40)]
 [term 33:REDUCE(with prod 40)] [term 36:REDUCE(with prod 40)]
 [term 37:REDUCE(with prod 40)]
From state #35
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 30:SHIFT(to state 67)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #36
 [term 22:REDUCE(with prod 42)] [term 24:REDUCE(with prod 42)]
 [term 25:REDUCE(with prod 42)] [term 27:REDUCE(with prod 42)]
 [term 28:REDUCE(with prod 42)] [term 30:REDUCE(with prod 42)]
 [term 31:REDUCE(with prod 42)] [term 32:REDUCE(with prod 42)]
 [term 33:REDUCE(with prod 42)] [term 36:REDUCE(with prod 42)]
 [term 37:REDUCE(with prod 42)]
From state #37
 [term 22:REDUCE(with prod 44)] [term 24:REDUCE(with prod 44)]
 [term 25:REDUCE(with prod 44)] [term 27:REDUCE(with prod 44)]
 [term 28:REDUCE(with prod 44)] [term 30:REDUCE(with prod 44)]
 [term 31:REDUCE(with prod 44)] [term 32:REDUCE(with prod 44)]
 [term 33:REDUCE(with prod 44)] [term 36:REDUCE(with prod 44)]
 [term 37:REDUCE(with prod 44)]
From state #38
 [term 22:REDUCE(with prod 43)] [term 24:REDUCE(with prod 43)]
 [term 25:REDUCE(with prod 43)] [term 27:REDUCE(with prod 43)]
 [term 28:REDUCE(with prod 43)] [term 30:REDUCE(with prod 43)]
 [term 31:REDUCE(with prod 43)] [term 32:REDUCE(with prod 43)]
 [term 33:REDUCE(with prod 43)] [term 36:REDUCE(with prod 43)]
 [term 37:REDUCE(with prod 43)]
From state #39
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #40
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #41
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 30:SHIFT(to state 42)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #42
 [term 22:REDUCE(with prod 48)] [term 24:REDUCE(with prod 48)]
 [term 25:REDUCE(with prod 48)] [term 27:REDUCE(with prod 48)]
 [term 28:REDUCE(with prod 48)] [term 30:REDUCE(with prod 48)]
 [term 31:REDUCE(with prod 48)] [term 32:REDUCE(with prod 48)]
 [term 33:REDUCE(with prod 48)] [term 36:REDUCE(with prod 48)]
 [term 37:REDUCE(with prod 48)]
From state #43
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #44
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #45
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #46
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #47
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #48
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #49
 [term 14:SHIFT(to state 50)] [term 38:SHIFT(to state 4)]
From state #50
 [term 22:REDUCE(with prod 37)] [term 24:REDUCE(with prod 37)]
 [term 25:REDUCE(with prod 37)] [term 27:REDUCE(with prod 37)]
 [term 28:REDUCE(with prod 37)] [term 30:REDUCE(with prod 37)]
 [term 31:REDUCE(with prod 37)] [term 32:REDUCE(with prod 37)]
 [term 33:REDUCE(with prod 37)] [term 36:REDUCE(with prod 37)]
 [term 37:REDUCE(with prod 37)]
From state #51
 [term 29:SHIFT(to state 52)]
From state #52
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 30:SHIFT(to state 55)] [term 38:SHIFT(to state 38)]
 [term 39:SHIFT(to state 34)]
From state #53
 [term 30:SHIFT(to state 57)] [term 36:SHIFT(to state 56)]
From state #54
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 30:REDUCE(with prod 56)]
 [term 32:SHIFT(to state 48)] [term 36:REDUCE(with prod 56)]
 [term 37:SHIFT(to state 49)]
From state #55
 [term 22:REDUCE(with prod 39)] [term 24:REDUCE(with prod 39)]
 [term 25:REDUCE(with prod 39)] [term 27:REDUCE(with prod 39)]
 [term 28:REDUCE(with prod 39)] [term 30:REDUCE(with prod 39)]
 [term 31:REDUCE(with prod 39)] [term 32:REDUCE(with prod 39)]
 [term 33:REDUCE(with prod 39)] [term 36:REDUCE(with prod 39)]
 [term 37:REDUCE(with prod 39)]
From state #56
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #57
 [term 22:REDUCE(with prod 38)] [term 24:REDUCE(with prod 38)]
 [term 25:REDUCE(with prod 38)] [term 27:REDUCE(with prod 38)]
 [term 28:REDUCE(with prod 38)] [term 30:REDUCE(with prod 38)]
 [term 31:REDUCE(with prod 38)] [term 32:REDUCE(with prod 38)]
 [term 33:REDUCE(with prod 38)] [term 36:REDUCE(with prod 38)]
 [term 37:REDUCE(with prod 38)]
From state #58
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 30:REDUCE(with prod 57)]
 [term 32:SHIFT(to state 48)] [term 36:REDUCE(with prod 57)]
 [term 37:SHIFT(to state 49)]
From state #59
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 32:SHIFT(to state 48)]
 [term 33:SHIFT(to state 60)] [term 37:SHIFT(to state 49)]
From state #60
 [term 22:REDUCE(with prod 36)] [term 24:REDUCE(with prod 36)]
 [term 25:REDUCE(with prod 36)] [term 27:REDUCE(with prod 36)]
 [term 28:REDUCE(with prod 36)] [term 30:REDUCE(with prod 36)]
 [term 31:REDUCE(with prod 36)] [term 32:REDUCE(with prod 36)]
 [term 33:REDUCE(with prod 36)] [term 36:REDUCE(with prod 36)]
 [term 37:REDUCE(with prod 36)]
From state #61
 [term 22:REDUCE(with prod 32)] [term 24:REDUCE(with prod 32)]
 [term 25:REDUCE(with prod 32)] [term 27:REDUCE(with prod 32)]
 [term 28:REDUCE(with prod 32)] [term 30:REDUCE(with prod 32)]
 [term 31:REDUCE(with prod 32)] [term 32:REDUCE(with prod 32)]
 [term 33:REDUCE(with prod 32)] [term 36:REDUCE(with prod 32)]
 [term 37:REDUCE(with prod 32)]
From state #62
 [term 22:REDUCE(with prod 34)] [term 24:REDUCE(with prod 34)]
 [term 25:REDUCE(with prod 34)] [term 27:REDUCE(with prod 34)]
 [term 28:REDUCE(with prod 34)] [term 30:REDUCE(with prod 34)]
 [term 31:REDUCE(with prod 34)] [term 32:REDUCE(with prod 34)]
 [term 33:REDUCE(with prod 34)] [term 36:REDUCE(with prod 34)]
 [term 37:REDUCE(with prod 34)]
From state #63
 [term 22:REDUCE(with prod 33)] [term 24:REDUCE(with prod 33)]
 [term 25:REDUCE(with prod 33)] [term 27:REDUCE(with prod 33)]
 [term 28:REDUCE(with prod 33)] [term 30:REDUCE(with prod 33)]
 [term 31:REDUCE(with prod 33)] [term 32:REDUCE(with prod 33)]
 [term 33:REDUCE(with prod 33)] [term 36:REDUCE(with prod 33)]
 [term 37:REDUCE(with prod 33)]
From state #64
 [term 22:REDUCE(with prod 31)] [term 24:REDUCE(with prod 31)]
 [term 25:REDUCE(with prod 31)] [term 27:REDUCE(with prod 31)]
 [term 28:REDUCE(with prod 31)] [term 30:REDUCE(with prod 31)]
 [term 31:REDUCE(with prod 31)] [term 32:REDUCE(with prod 31)]
 [term 33:REDUCE(with prod 31)] [term 36:REDUCE(with prod 31)]
 [term 37:REDUCE(with prod 31)]
From state #65
 [term 22:REDUCE(with prod 35)] [term 24:REDUCE(with prod 35)]
 [term 25:REDUCE(with prod 35)] [term 27:REDUCE(with prod 35)]
 [term 28:REDUCE(with prod 35)] [term 30:REDUCE(with prod 35)]
 [term 31:REDUCE(with prod 35)] [term 32:REDUCE(with prod 35)]
 [term 33:REDUCE(with prod 35)] [term 36:REDUCE(with prod 35)]
 [term 37:REDUCE(with prod 35)]
From state #66
 [term 22:REDUCE(with prod 47)] [term 24:REDUCE(with prod 47)]
 [term 25:REDUCE(with prod 47)] [term 27:REDUCE(with prod 47)]
 [term 28:REDUCE(with prod 47)] [term 30:REDUCE(with prod 47)]
 [term 31:REDUCE(with prod 47)] [term 32:REDUCE(with prod 47)]
 [term 33:REDUCE(with prod 47)] [term 36:REDUCE(with prod 47)]
 [term 37:REDUCE(with prod 47)]
From state #67
 [term 31:SHIFT(to state 68)]
From state #68
 [term 2:REDUCE(with prod 65)] [term 15:REDUCE(with prod 65)]
 [term 16:REDUCE(with prod 65)] [term 17:REDUCE(with prod 65)]
 [term 18:REDUCE(with prod 65)] [term 21:REDUCE(with prod 65)]
 [term 34:REDUCE(with prod 65)] [term 35:REDUCE(with prod 65)]
 [term 38:REDUCE(with prod 65)]
From state #69
 [term 32:SHIFT(to state 73)]
From state #70
 [term 29:SHIFT(to state 71)]
From state #71
 [term 30:SHIFT(to state 72)]
From state #72
 [term 22:REDUCE(with prod 46)] [term 24:REDUCE(with prod 46)]
 [term 25:REDUCE(with prod 46)] [term 27:REDUCE(with prod 46)]
 [term 28:REDUCE(with prod 46)] [term 30:REDUCE(with prod 46)]
 [term 31:REDUCE(with prod 46)] [term 32:REDUCE(with prod 46)]
 [term 33:REDUCE(with prod 46)] [term 36:REDUCE(with prod 46)]
 [term 37:REDUCE(with prod 46)]
From state #73
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #74
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 32:SHIFT(to state 48)]
 [term 33:SHIFT(to state 75)] [term 37:SHIFT(to state 49)]
From state #75
 [term 22:REDUCE(with prod 45)] [term 24:REDUCE(with prod 45)]
 [term 25:REDUCE(with prod 45)] [term 27:REDUCE(with prod 45)]
 [term 28:REDUCE(with prod 45)] [term 30:REDUCE(with prod 45)]
 [term 31:REDUCE(with prod 45)] [term 32:REDUCE(with prod 45)]
 [term 33:REDUCE(with prod 45)] [term 36:REDUCE(with prod 45)]
 [term 37:REDUCE(with prod 45)]
From state #76
 [term 35:SHIFT(to state 77)]
From state #77
 [term 0:REDUCE(with prod 3)] [term 3:REDUCE(with prod 3)]
From state #78
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #79
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 30:SHIFT(to state 80)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #80
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 21:SHIFT(to state 27)]
 [term 34:SHIFT(to state 18)] [term 38:SHIFT(to state 4)]
From state #81
 [term 16:SHIFT(to state 82)]
From state #82
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 21:SHIFT(to state 27)]
 [term 34:SHIFT(to state 18)] [term 38:SHIFT(to state 4)]
From state #83
 [term 2:REDUCE(with prod 66)] [term 15:REDUCE(with prod 66)]
 [term 16:REDUCE(with prod 66)] [term 17:REDUCE(with prod 66)]
 [term 18:REDUCE(with prod 66)] [term 21:REDUCE(with prod 66)]
 [term 34:REDUCE(with prod 66)] [term 35:REDUCE(with prod 66)]
 [term 38:REDUCE(with prod 66)]
From state #84
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #85
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #86
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 32:SHIFT(to state 48)]
 [term 33:SHIFT(to state 87)] [term 37:SHIFT(to state 49)]
From state #87
 [term 23:SHIFT(to state 88)]
From state #88
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #89
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 90)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #90
 [term 2:REDUCE(with prod 67)] [term 15:REDUCE(with prod 67)]
 [term 16:REDUCE(with prod 67)] [term 17:REDUCE(with prod 67)]
 [term 18:REDUCE(with prod 67)] [term 21:REDUCE(with prod 67)]
 [term 34:REDUCE(with prod 67)] [term 35:REDUCE(with prod 67)]
 [term 38:REDUCE(with prod 67)]
From state #91
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 92)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #92
 [term 2:REDUCE(with prod 63)] [term 15:REDUCE(with prod 63)]
 [term 16:REDUCE(with prod 63)] [term 17:REDUCE(with prod 63)]
 [term 18:REDUCE(with prod 63)] [term 21:REDUCE(with prod 63)]
 [term 34:REDUCE(with prod 63)] [term 35:REDUCE(with prod 63)]
 [term 38:REDUCE(with prod 63)]
From state #93
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 94)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #94
 [term 2:REDUCE(with prod 64)] [term 15:REDUCE(with prod 64)]
 [term 16:REDUCE(with prod 64)] [term 17:REDUCE(with prod 64)]
 [term 18:REDUCE(with prod 64)] [term 21:REDUCE(with prod 64)]
 [term 34:REDUCE(with prod 64)] [term 35:REDUCE(with prod 64)]
 [term 38:REDUCE(with prod 64)]
From state #95
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #96
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 30:SHIFT(to state 97)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #97
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 21:SHIFT(to state 27)]
 [term 34:SHIFT(to state 18)] [term 38:SHIFT(to state 4)]
From state #98
 [term 2:REDUCE(with prod 62)] [term 15:REDUCE(with prod 62)]
 [term 16:REDUCE(with prod 62)] [term 17:REDUCE(with prod 62)]
 [term 18:REDUCE(with prod 62)] [term 21:REDUCE(with prod 62)]
 [term 34:REDUCE(with prod 62)] [term 35:REDUCE(with prod 62)]
 [term 38:REDUCE(with prod 62)]
From state #99
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 21:SHIFT(to state 27)]
 [term 34:SHIFT(to state 18)] [term 35:SHIFT(to state 103)]
 [term 38:SHIFT(to state 4)]
From state #100
 [term 2:REDUCE(with prod 60)] [term 15:REDUCE(with prod 60)]
 [term 17:REDUCE(with prod 60)] [term 18:REDUCE(with prod 60)]
 [term 21:REDUCE(with prod 60)] [term 34:REDUCE(with prod 60)]
 [term 35:REDUCE(with prod 60)] [term 38:REDUCE(with prod 60)]
From state #101
 [term 2:REDUCE(with prod 24)] [term 15:REDUCE(with prod 24)]
 [term 16:REDUCE(with prod 24)] [term 17:REDUCE(with prod 24)]
 [term 18:REDUCE(with prod 24)] [term 21:REDUCE(with prod 24)]
 [term 34:REDUCE(with prod 24)] [term 35:REDUCE(with prod 24)]
 [term 38:REDUCE(with prod 24)]
From state #102
 [term 2:REDUCE(with prod 61)] [term 15:REDUCE(with prod 61)]
 [term 17:REDUCE(with prod 61)] [term 18:REDUCE(with prod 61)]
 [term 21:REDUCE(with prod 61)] [term 34:REDUCE(with prod 61)]
 [term 35:REDUCE(with prod 61)] [term 38:REDUCE(with prod 61)]
From state #103
 [term 2:REDUCE(with prod 23)] [term 15:REDUCE(with prod 23)]
 [term 16:REDUCE(with prod 23)] [term 17:REDUCE(with prod 23)]
 [term 18:REDUCE(with prod 23)] [term 21:REDUCE(with prod 23)]
 [term 34:REDUCE(with prod 23)] [term 35:REDUCE(with prod 23)]
 [term 38:REDUCE(with prod 23)]
From state #104
 [term 0:REDUCE(with prod 0)] [term 3:SHIFT(to state 106)]
From state #105
 [term 0:REDUCE(with prod 54)] [term 3:REDUCE(with prod 54)]
From state #106
 [term 38:SHIFT(to state 4)]
From state #107
 [term 5:SHIFT(to state 109)] [term 34:SHIFT(to state 108)]
From state #108
 [term 6:SHIFT(to state 113)] [term 7:SHIFT(to state 116)]
 [term 8:SHIFT(to state 115)] [term 38:SHIFT(to state 119)]
From state #109
 [term 38:SHIFT(to state 4)]
From state #110
 [term 34:SHIFT(to state 111)]
From state #111
 [term 6:SHIFT(to state 113)] [term 7:SHIFT(to state 116)]
 [term 8:SHIFT(to state 115)] [term 38:SHIFT(to state 119)]
From state #112
 [term 38:SHIFT(to state 4)]
From state #113
 [term 32:SHIFT(to state 179)] [term 38:REDUCE(with prod 19)]
From state #114
 [term 6:SHIFT(to state 113)] [term 7:SHIFT(to state 116)]
 [term 8:SHIFT(to state 115)] [term 35:SHIFT(to state 176)]
 [term 38:SHIFT(to state 119)]
From state #115
 [term 6:SHIFT(to state 113)] [term 7:SHIFT(to state 116)]
 [term 38:SHIFT(to state 119)]
From state #116
 [term 38:REDUCE(with prod 20)]
From state #117
 [term 8:REDUCE(with prod 52)] [term 35:REDUCE(with prod 52)]
From state #118
 [term 2:REDUCE(with prod 50)] [term 6:REDUCE(with prod 50)]
 [term 7:REDUCE(with prod 50)] [term 8:REDUCE(with prod 50)]
 [term 15:REDUCE(with prod 50)] [term 17:REDUCE(with prod 50)]
 [term 18:REDUCE(with prod 50)] [term 21:REDUCE(with prod 50)]
 [term 34:REDUCE(with prod 50)] [term 35:REDUCE(with prod 50)]
 [term 38:REDUCE(with prod 50)]
From state #119
 [term 38:REDUCE(with prod 22)]
From state #120
 [term 8:SHIFT(to state 115)] [term 35:SHIFT(to state 121)]
From state #121
 [term 0:REDUCE(with prod 8)] [term 3:REDUCE(with prod 8)]
From state #122
 [term 8:REDUCE(with prod 53)] [term 35:REDUCE(with prod 53)]
From state #123
 [term 38:SHIFT(to state 4)]
From state #124
 [term 29:SHIFT(to state 125)]
From state #125
 [term 6:SHIFT(to state 113)] [term 7:SHIFT(to state 116)]
 [term 30:SHIFT(to state 129)] [term 38:SHIFT(to state 119)]
From state #126
 [term 30:SHIFT(to state 154)] [term 36:SHIFT(to state 153)]
From state #127
 [term 30:REDUCE(with prod 58)] [term 36:REDUCE(with prod 58)]
From state #128
 [term 38:SHIFT(to state 4)]
From state #129
 [term 34:SHIFT(to state 130)]
From state #130
 [term 2:SHIFT(to state 20)] [term 6:SHIFT(to state 113)]
 [term 7:SHIFT(to state 116)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 132)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 131)]
From state #131
 [term 23:REDUCE(with prod 49)] [term 32:REDUCE(with prod 49)]
 [term 38:REDUCE(with prod 22)]
From state #132
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #133
 [term 2:SHIFT(to state 20)] [term 6:SHIFT(to state 113)]
 [term 7:SHIFT(to state 116)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 139)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 131)]
From state #134
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 135)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 4)]
From state #135
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #136
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 137)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #137
 [term 35:SHIFT(to state 138)]
From state #138
 [term 8:REDUCE(with prod 16)] [term 35:REDUCE(with prod 16)]
From state #139
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #140
 [term 2:REDUCE(with prod 51)] [term 6:REDUCE(with prod 51)]
 [term 7:REDUCE(with prod 51)] [term 8:REDUCE(with prod 51)]
 [term 15:REDUCE(with prod 51)] [term 17:REDUCE(with prod 51)]
 [term 18:REDUCE(with prod 51)] [term 21:REDUCE(with prod 51)]
 [term 34:REDUCE(with prod 51)] [term 35:REDUCE(with prod 51)]
 [term 38:REDUCE(with prod 51)]
From state #141
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 142)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 4)]
From state #142
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #143
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 144)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #144
 [term 35:SHIFT(to state 145)]
From state #145
 [term 8:REDUCE(with prod 15)] [term 35:REDUCE(with prod 15)]
From state #146
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 147)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #147
 [term 35:SHIFT(to state 148)]
From state #148
 [term 8:REDUCE(with prod 17)] [term 35:REDUCE(with prod 17)]
From state #149
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 150)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #150
 [term 35:SHIFT(to state 151)]
From state #151
 [term 8:REDUCE(with prod 18)] [term 35:REDUCE(with prod 18)]
From state #152
 [term 30:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
From state #153
 [term 6:SHIFT(to state 113)] [term 7:SHIFT(to state 116)]
 [term 38:SHIFT(to state 119)]
From state #154
 [term 34:SHIFT(to state 155)]
From state #155
 [term 2:SHIFT(to state 20)] [term 6:SHIFT(to state 113)]
 [term 7:SHIFT(to state 116)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 156)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 131)]
From state #156
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #157
 [term 2:SHIFT(to state 20)] [term 6:SHIFT(to state 113)]
 [term 7:SHIFT(to state 116)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 163)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 131)]
From state #158
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 159)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 4)]
From state #159
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #160
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 161)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #161
 [term 35:SHIFT(to state 162)]
From state #162
 [term 8:REDUCE(with prod 12)] [term 35:REDUCE(with prod 12)]
From state #163
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #164
 [term 2:SHIFT(to state 20)] [term 15:SHIFT(to state 25)]
 [term 17:SHIFT(to state 19)] [term 18:SHIFT(to state 165)]
 [term 21:SHIFT(to state 27)] [term 34:SHIFT(to state 18)]
 [term 38:SHIFT(to state 4)]
From state #165
 [term 4:SHIFT(to state 32)] [term 11:SHIFT(to state 37)]
 [term 19:SHIFT(to state 33)] [term 20:SHIFT(to state 36)]
 [term 26:SHIFT(to state 39)] [term 29:SHIFT(to state 40)]
 [term 38:SHIFT(to state 38)] [term 39:SHIFT(to state 34)]
From state #166
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 167)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #167
 [term 35:SHIFT(to state 168)]
From state #168
 [term 8:REDUCE(with prod 11)] [term 35:REDUCE(with prod 11)]
From state #169
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 170)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #170
 [term 35:SHIFT(to state 171)]
From state #171
 [term 8:REDUCE(with prod 13)] [term 35:REDUCE(with prod 13)]
From state #172
 [term 22:SHIFT(to state 44)] [term 24:SHIFT(to state 45)]
 [term 25:SHIFT(to state 47)] [term 27:SHIFT(to state 43)]
 [term 28:SHIFT(to state 46)] [term 31:SHIFT(to state 173)]
 [term 32:SHIFT(to state 48)] [term 37:SHIFT(to state 49)]
From state #173
 [term 35:SHIFT(to state 174)]
From state #174
 [term 8:REDUCE(with prod 14)] [term 35:REDUCE(with prod 14)]
From state #175
 [term 30:REDUCE(with prod 59)] [term 36:REDUCE(with prod 59)]
From state #176
 [term 0:REDUCE(with prod 9)] [term 3:REDUCE(with prod 9)]
From state #177
 [term 8:SHIFT(to state 115)] [term 35:SHIFT(to state 178)]
From state #178
 [term 0:REDUCE(with prod 7)] [term 3:REDUCE(with prod 7)]
From state #179
 [term 33:SHIFT(to state 180)]
From state #180
 [term 38:REDUCE(with prod 21)]
From state #181
 [term 31:SHIFT(to state 182)]
From state #182
 [term 2:REDUCE(with prod 10)] [term 6:REDUCE(with prod 10)]
 [term 7:REDUCE(with prod 10)] [term 8:REDUCE(with prod 10)]
 [term 15:REDUCE(with prod 10)] [term 17:REDUCE(with prod 10)]
 [term 18:REDUCE(with prod 10)] [term 21:REDUCE(with prod 10)]
 [term 34:REDUCE(with prod 10)] [term 35:REDUCE(with prod 10)]
 [term 38:REDUCE(with prod 10)]
From state #183
 [term 6:SHIFT(to state 113)] [term 7:SHIFT(to state 116)]
 [term 8:SHIFT(to state 115)] [term 35:SHIFT(to state 186)]
 [term 38:SHIFT(to state 119)]
From state #184
 [term 8:SHIFT(to state 115)] [term 35:SHIFT(to state 185)]
From state #185
 [term 0:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
From state #186
 [term 0:REDUCE(with prod 6)] [term 3:REDUCE(with prod 6)]
From state #187
 [term 8:SHIFT(to state 115)] [term 35:SHIFT(to state 188)]
From state #188
 [term 0:REDUCE(with prod 4)] [term 3:REDUCE(with prod 4)]
From state #189
 [term 0:REDUCE(with prod 55)] [term 3:REDUCE(with prod 55)]
From state #190
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 21->state 2]
From state #1
From state #2
 [non term 11->state 104] [non term 12->state 105]
From state #3
 [non term 5->state 5]
From state #4
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
From state #13
From state #14
 [non term 5->state 15]
From state #15
From state #16
From state #17
 [non term 1->state 26] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #18
 [non term 1->state 100] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30] [non term 10->state 99]
From state #19
From state #20
 [non term 4->state 93]
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
From state #29
From state #30
From state #31
 [non term 4->state 35]
From state #32
 [non term 5->state 70]
From state #33
From state #34
From state #35
From state #36
From state #37
From state #38
From state #39
 [non term 4->state 66]
From state #40
 [non term 4->state 41]
From state #41
From state #42
From state #43
 [non term 4->state 65]
From state #44
 [non term 4->state 64]
From state #45
 [non term 4->state 63]
From state #46
 [non term 4->state 62]
From state #47
 [non term 4->state 61]
From state #48
 [non term 4->state 59]
From state #49
 [non term 5->state 51]
From state #50
From state #51
From state #52
 [non term 4->state 54] [non term 19->state 53]
From state #53
From state #54
From state #55
From state #56
 [non term 4->state 58]
From state #57
From state #58
From state #59
From state #60
From state #61
From state #62
From state #63
From state #64
From state #65
From state #66
From state #67
From state #68
From state #69
From state #70
From state #71
From state #72
From state #73
 [non term 4->state 74]
From state #74
From state #75
From state #76
From state #77
From state #78
 [non term 4->state 79]
From state #79
From state #80
 [non term 1->state 81] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #81
From state #82
 [non term 1->state 83] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #83
From state #84
 [non term 4->state 91]
From state #85
 [non term 4->state 86]
From state #86
From state #87
From state #88
 [non term 4->state 89]
From state #89
From state #90
From state #91
From state #92
From state #93
From state #94
From state #95
 [non term 4->state 96]
From state #96
From state #97
 [non term 1->state 98] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #98
From state #99
 [non term 1->state 102] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #100
From state #101
From state #102
From state #103
From state #104
 [non term 12->state 189]
From state #105
From state #106
 [non term 5->state 107]
From state #107
From state #108
 [non term 13->state 183] [non term 14->state 118] [non term 15->state 184]
 [non term 16->state 117] [non term 20->state 112]
From state #109
 [non term 5->state 110]
From state #110
From state #111
 [non term 13->state 114] [non term 14->state 118] [non term 15->state 120]
 [non term 16->state 117] [non term 20->state 112]
From state #112
 [non term 5->state 181]
From state #113
From state #114
 [non term 14->state 140] [non term 15->state 177] [non term 16->state 117]
 [non term 20->state 112]
From state #115
 [non term 20->state 123]
From state #116
From state #117
From state #118
From state #119
From state #120
 [non term 16->state 122]
From state #121
From state #122
From state #123
 [non term 5->state 124]
From state #124
From state #125
 [non term 17->state 127] [non term 18->state 126] [non term 20->state 128]
From state #126
From state #127
From state #128
 [non term 5->state 152]
From state #129
From state #130
 [non term 1->state 100] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30] [non term 10->state 134]
 [non term 13->state 133] [non term 14->state 118] [non term 20->state 112]
From state #131
From state #132
 [non term 4->state 149]
From state #133
 [non term 1->state 100] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30] [non term 10->state 141]
 [non term 14->state 140] [non term 20->state 112]
From state #134
 [non term 1->state 102] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #135
 [non term 4->state 136]
From state #136
From state #137
From state #138
From state #139
 [non term 4->state 146]
From state #140
From state #141
 [non term 1->state 102] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #142
 [non term 4->state 143]
From state #143
From state #144
From state #145
From state #146
From state #147
From state #148
From state #149
From state #150
From state #151
From state #152
From state #153
 [non term 17->state 175] [non term 20->state 128]
From state #154
From state #155
 [non term 1->state 100] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30] [non term 10->state 158]
 [non term 13->state 157] [non term 14->state 118] [non term 20->state 112]
From state #156
 [non term 4->state 172]
From state #157
 [non term 1->state 100] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30] [non term 10->state 164]
 [non term 14->state 140] [non term 20->state 112]
From state #158
 [non term 1->state 102] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #159
 [non term 4->state 160]
From state #160
From state #161
From state #162
From state #163
 [non term 4->state 169]
From state #164
 [non term 1->state 102] [non term 2->state 29] [non term 3->state 21]
 [non term 5->state 22] [non term 6->state 24] [non term 7->state 28]
 [non term 8->state 23] [non term 9->state 30]
From state #165
 [non term 4->state 166]
From state #166
From state #167
From state #168
From state #169
From state #170
From state #171
From state #172
From state #173
From state #174
From state #175
From state #176
From state #177
 [non term 16->state 122]
From state #178
From state #179
From state #180
From state #181
From state #182
From state #183
 [non term 14->state 140] [non term 15->state 187] [non term 16->state 117]
 [non term 20->state 112]
From state #184
 [non term 16->state 122]
From state #185
From state #186
From state #187
 [non term 16->state 122]
From state #188
From state #189
From state #190
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 0 warnings
  40 terminals, 22 non-terminals, and 69 productions declared, 
  producing 191 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
