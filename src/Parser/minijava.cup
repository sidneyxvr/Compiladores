/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 18sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal DISPLAY, CLASS, NEW, EXTENDS, INT, BOOLEAN, PUBLIC, STATIC, VOID, THIS, STRING, MAIN, LENGTH, IF, ELSE, WHILE, RETURN, TRUE, FALSE, PRINT;

/* operators */
terminal PLUS, BECOMES, MINUS, TIMES, NOT, AND, LESSTHAN;

/* delimiters */
terminal LPAREN, RPAREN, SEMICOLON, LBRACKET, RBRACKET, LBRACE, RBRACE, COMMA, DOT;

/* identifiers */
terminal String IDENTIFIER;
terminal Integer DIGIT;


/* Nonterminals (constructed by parser): */

nonterminal Program Program;
nonterminal Statement Statement;
nonterminal Assign AssignStatement;
nonterminal Display DisplayStatement;
nonterminal Exp Expression;
nonterminal Identifier Identifier;
nonterminal While WhileStatement;
nonterminal Print PrintStatement;
nonterminal If IfStatement;
nonterminal ArrayAssign ArrayAssignStatement;
nonterminal StatementList StatementList;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal Formal Formal;
nonterminal FormalList FormalList;
nonterminal ExpList ExpressionList;
nonterminal Type Type;
nonterminal MainClass MainClass;

/* Precedence declarations: */

precedence left PLUS, MINUS, TIMES, AND, LESSTHAN, DOT;
precedence right NEW, NOT;


/* Productions: */
	     

Program ::= MainClass:mc ClassDeclList:cl
				{: RESULT = new Program(mc, cl, mcxleft); :}
			| MainClass:mc 
				{: RESULT = new Program(mc, new ClassDeclList(mcxleft), mcxleft); :}; 
			 
MainClass ::= CLASS Identifier:name LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier:args RPAREN LBRACE Statement:s RBRACE RBRACE
				{: RESULT = new MainClass(name, args, s, namexleft); :};	     
	        	 	 
ClassDecl ::= CLASS Identifier:name
			  		LBRACE:lb VarDeclList:vl MethodDeclList:ml RBRACE
					{: RESULT = new ClassDeclSimple(name, vl, ml, lbxleft); :}
			| CLASS Identifier:name
			  		LBRACE:lb MethodDeclList:ml RBRACE
					{: RESULT = new ClassDeclSimple(name, new VarDeclList(lbxleft), ml, lbxleft); :}
			| CLASS Identifier:name
			  		LBRACE:lb VarDeclList:vl RBRACE
					{: RESULT = new ClassDeclSimple(name, vl, new MethodDeclList(vlxleft), lbxleft); :}
			| CLASS Identifier:name EXTENDS Identifier:parent 
			  		LBRACE:lb VarDeclList:vl MethodDeclList:ml RBRACE
					{: RESULT = new ClassDeclExtends(name, parent, vl, ml, lbxleft); :}
			| CLASS Identifier:name EXTENDS Identifier:parent 
			  		LBRACE:lb MethodDeclList:ml RBRACE
					{: RESULT = new ClassDeclExtends(name, parent, new VarDeclList(lbxleft), ml, lbxleft); :}
			| CLASS Identifier:name EXTENDS Identifier:parent 
			  		LBRACE:lb VarDeclList:vl RBRACE
					{: RESULT = new ClassDeclExtends(name, parent, vl, new MethodDeclList(vlxleft), lbxleft); :};
  
VarDecl ::= Type:t Identifier:id SEMICOLON
            {: RESULT = new VarDecl(t, id, txleft); :};        
            
MethodDecl ::= PUBLIC Type:t Identifier:id LPAREN FormalList:fl RPAREN 
			LBRACE VarDeclList:vl StatementList:sl RETURN Expression:e SEMICOLON RBRACE 
            {: RESULT = new MethodDecl(t, id, fl, vl, sl, e, txleft); :}
            
            | PUBLIC Type:t Identifier:id LPAREN FormalList:fl RPAREN 
			LBRACE StatementList:sl RETURN Expression:e SEMICOLON RBRACE 
            {: RESULT = new MethodDecl(t, id, fl, new VarDeclList(flxleft), sl, e, txleft); :}
            
            | PUBLIC Type:t Identifier:id LPAREN FormalList:fl RPAREN 
			LBRACE VarDeclList:vl RETURN Expression:e SEMICOLON RBRACE 
            {: RESULT = new MethodDecl(t, id, fl, vl, new StatementList(vlxleft), e, txleft); :}
            
            | PUBLIC Type:t Identifier:id LPAREN:l RPAREN 
			LBRACE VarDeclList:vl StatementList:sl RETURN Expression:e SEMICOLON RBRACE 
            {: RESULT = new MethodDecl(t, id, new FormalList(lxleft), vl, sl, e, txleft); :};
            
Type ::=  INT:i
            {: RESULT = new IntegerType(ixleft); :}
          | BOOLEAN:b
            {: RESULT = new BooleanType(bxleft); :}
          | INT LBRACKET RBRACKET:rb
            {: RESULT = new IntArrayType(rbxleft); :}
          | IDENTIFIER:id
            {: RESULT = new IdentifierType(id, idxleft); :};
            
Statement   ::= LBRACE StatementList:sl RBRACE
            	{: RESULT = new Block(sl, slxleft); :} 
            | LBRACE:l RBRACE
           		{: 	StatementList s = new StatementList(lxleft); 
           			RESULT = new Block(s, lxleft); :}
           	| IfStatement:s
           		{: RESULT = s; :}
			| WhileStatement:s
            	{: RESULT = s; :}
			| PrintStatement:s
           		{: RESULT = s; :}
			| AssignStatement:s
                {: RESULT = s; :}
            | ArrayAssignStatement:s
           		{: RESULT = s; :}
            | DisplayStatement:s
                {: RESULT = s; :};
                
Expression    ::= Expression:arg1 PLUS Expression:arg2
	            {: RESULT = new Plus(arg1, arg2, arg1xleft); :}
	        | Expression:arg1 TIMES Expression:arg2
	            {: RESULT = new Times(arg1, arg2, arg1xleft); :}
	        | Expression:arg1 MINUS Expression:arg2
	            {: RESULT = new Minus(arg1, arg2, arg1xleft); :}
	        | Expression:arg1 LESSTHAN Expression:arg2
	            {: RESULT = new LessThan(arg1, arg2, arg1xleft); :}
	        | Expression:arg1 AND Expression:arg2
	            {: RESULT = new And(arg1, arg2, arg1xleft); :}
	            
	        | Expression:arg1 LBRACKET Expression:arg2 RBRACKET
	            {: RESULT = new ArrayLookup(arg1, arg2, arg2xleft); :}
	        | Expression:e DOT LENGTH
	    		{: RESULT = new ArrayLength(e, exleft); :}
	    	| Expression:e DOT Identifier:id LPAREN ExpressionList:el RPAREN
	            {: RESULT = new Call(e, id, el, exleft); :}
	        | Expression:e DOT Identifier:id LPAREN:l  RPAREN
	            {: RESULT = new Call(e, id, new ExpList(lxleft), exleft); :}            
	        | DIGIT:n
	            {: RESULT = new IntegerLiteral(n, nxleft); :}
	        
	        | TRUE:t
	    		{: RESULT = new True(txleft); :}
	        | FALSE:f
	    		{: RESULT = new False(fxleft); :}
	    	
	        | IDENTIFIER:name
            	{: RESULT = new IdentifierExp(name, namexleft); :}
            | THIS:t
	    		{: RESULT = new This(txleft); :}
	    	| NEW INT LBRACKET Expression:expr RBRACKET
	            {: RESULT = new NewArray(expr, exprxleft); :}
	        | NEW Identifier:id LPAREN RPAREN 
	            {: RESULT = new NewObject(id, idxleft); :}
	        | NOT Expression:arg1 
	            {: RESULT = new Not(arg1, arg1xleft); :}
	        | LPAREN Expression:expr RPAREN
	            {: RESULT = expr; :};      

Identifier  ::= IDENTIFIER:id
            {: RESULT = new Identifier(id, idxleft); :};
            
VarDeclList ::= VarDecl:v
            {: VarDeclList vl = new VarDeclList(vxleft);
              vl.add(v);
              RESULT = vl; :}
          | VarDeclList:vl VarDecl:v
            {: vl.add(v);
              RESULT = vl; :};

MethodDeclList ::= MethodDecl:m
            {: MethodDeclList ml = new MethodDeclList(mxleft);
              ml.add(m);
              RESULT = ml; :}
          | MethodDeclList:ml MethodDecl:m 
            {: ml.add(m);
              RESULT = ml; :};
        
ClassDeclList ::= ClassDecl:c
            {: ClassDeclList cl = new ClassDeclList(cxleft);
              cl.add(c);
              RESULT = cl; :}
          | ClassDeclList:cl ClassDecl:c
            {: cl.add(c);
              RESULT = cl; :};

ExpressionList ::= Expression:e
            {: ExpList el = new ExpList(exleft);
              el.add(e);
              RESULT = el; :}
          | ExpressionList:el COMMA Expression:e
            {: el.add(e);
              RESULT = el; :};

FormalList ::= Formal:f
            {: FormalList fl = new FormalList(fxleft);
              fl.add(f);
              RESULT = fl; :}
          | FormalList:fl COMMA Formal:f
            {: fl.add(f);
              RESULT = fl; :};

StatementList ::= Statement:s
            {: StatementList sl = new StatementList(sxleft);
              sl.add(s);
              RESULT = sl; :}
          | StatementList:sl Statement:s
            {: sl.add(s);
              RESULT = sl; :};

WhileStatement ::= WHILE LPAREN Expression:e RPAREN Statement:s
            		{: RESULT = new While(e, s, exleft); :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idxleft); :};

DisplayStatement ::= DISPLAY:d Expression:expr SEMICOLON
                     {: RESULT = new Display(expr, dxleft); :};

PrintStatement ::= PRINT LPAREN Expression:e RPAREN SEMICOLON
					{: RESULT = new Print(e, exleft); :};
					
IfStatement ::= IF LPAREN Expression:e RPAREN Statement:s1 ELSE Statement:s2
				{: RESULT = new If(e, s1, s2, exleft); :};
				
ArrayAssignStatement ::= Identifier:id LBRACKET Expression:e1 RBRACKET BECOMES Expression:e2 SEMICOLON
							{: RESULT = new ArrayAssign(id, e1, e2, idxleft); :};

Formal ::= Type:t Identifier:id
            {: RESULT = new Formal(t, id, txleft); :};